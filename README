---------------------------------------
Genome Ageing Simulator, v.2.0 - README
---------------------------------------

Files:
- genome-simulation.py  -  main simulation script
- gs_functions.py  -  functions script
- config.py  -  config file; copy this into the simulation directory
- gs_import.R  -  script for import into R

Usage:
1. Create a new simulation directory for every run.
2. Copy config.py into that directory and edit the copy as desired. You
   can rename it if you like.
3a. Call genome-simulation.py, either as a batch script 
    (./genome-simulation.py) or a python script 
    (python genome-simulation.py). (NB: On the cluster, it can only
    be called as a python script.)
3b. Specify the path to the simulation directory, the config file name 
    (if changed), and the path to the seed population file (if any).
3c. Use -v and -r to alter what is printed to stdout.
4. Once the simulation is completed, population and record objects 
   will be written to run_x_pop.txt and run_x_rec.txt respectively,
   where x is the run number. These can be imported into Python using
   cPickle or R using gs_import.R's import_data function.

Run "python genome-simulator.py -h" for more information on arguments.

--------
Examples
--------

All examples assume the current working directory is the script directory.

-- Example run 1 (default params) --

mkdir testrun
cp params.py testrun
python genome-simulation.py testrun

-- Example run 2 (seeding from testrun, with verbose output) --

mkdir seedrun
cp params.py seedrun
python genome-simulation.py -v -r 5 -s testrun/run_1_pop.txt seedrun

-- Example R import --

seedrun_data <- import_data("seedrun")
