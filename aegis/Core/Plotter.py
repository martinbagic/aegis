########################################################################
# AEGIS - Ageing of Evolving Genomes in Silico                         #
# Module: Plot                                                         #
# Classes: Plotter                                                     #
# Description: Wrapper object that takes and stores pandas dataframes  #
#   build from csv files that were derived from the Record object      #
#   and implements plotting methods on it.                             #
########################################################################

# NOTE only plots age_distribution if it was recorded for all stages
# NOTE only plots survival curve if age distribution was recorded for all stages
#      and last_K is lesser than number of stages (last_K is defined in ./__init__.py)

from .functions import make_windows, timenow, get_runtime
import numpy as np, pandas as pd, os, shutil
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import seaborn as sns

try:
       import cPickle as pickle
except:
       import pickle

class Plotter:
    """Wrapper class for storing a dataframes and its associated plots."""

    def __init__(self, inpath, verbose=False):
        """Import a Record object and initialise plotting methods."""
        self.verbose = verbose
        if self.verbose:
            self.starttime = timenow(False)
            print "\nBeginning plotting {}.".format(timenow())
            print "Working directory: "+os.getcwd()
            print "Reading csv files from {}.".format(os.path.join(\
                    os.path.abspath(inpath),"csv_files"))
        self.abort = False
        try:
            inp = os.path.join(inpath,"csv_files")
            self.single_df = pd.read_csv(os.path.join(inp,"single.csv"))\
                    .set_index("name")
            self.nstagex1_df = pd.read_csv(os.path.join(inp,"nstage-x-1.csv"))
            self.has_agedist =  self.single_df.loc["age_dist_N","value"]=="all"
            if self.has_agedist:
                self.nstagexmaxls_df = pd.read_csv(os.path.join(inp,"nstage-x-maxls.csv"))
            self.has_surv_curve = os.path.exists(os.path.join(inp,"maxls-x-1.csv"))
            if self.has_surv_curve:
                self.maxlsx1_df = pd.read_csv(os.path.join(inp,"maxls-x-1.csv"))
            self.nsnapxmaxls_df = pd.read_csv(os.path.join(inp,"nsnap-x-maxls.csv"))
            self.nsnapxnbit_df = pd.read_csv(os.path.join(inp,"nsnap-x-nbit.csv"))
            self.sliding_window_df = pd.read_csv(os.path.join(inp,"sliding_window.csv"))
            self.nsnapxnloci_df = pd.read_csv(os.path.join(inp,"nsnap-x-nloci.csv"))
            self.nsnapx1_df = pd.read_csv(os.path.join(inp,"nsnap-x-1.csv"))
        except:
            print "Error occured while reading csv files. Makes sure the provided path contains a directory 'csv_files' that was generated by running aegis read --csv. Aborting..."
            self.abort = True
        self.plot_methods = ["plot_pop_res",\
                             "plot_genotype_mean_snaps",\
                             "plot_genotype_mean",\
                             "plot_fitness_term_snaps",\
                             "plot_fitness_term",\
                             "plot_n1_sliding_window_snaps",\
                             "plot_n1_var_sliding_window_snaps",\
                             "plot_generation",\
                             "plot_surv_curve",\
                             "plot_age_dist"\
                             ]
        self.plot_names = ["01_pop-res",\
                           "02_genotype-mean-snaps",\
                           "02_genotype-mean",\
                           "03_fitness-term-snaps",\
                           "03_fitness-term",\
                           "04_bits-snaps",\
                           "05_bits-var-snaps",\
                           "06_generation",\
                           "07_surv-curve",\
                           "08_age-dist"\
                           ]
        self.figures = []
        self.outdir = self.single_df.loc["output_prefix","value"] + "_plots"
        # set style for seaborn plots
        sns.set(style="darkgrid")

    def generate_figures(self):
        if self.abort: return
        if self.verbose: print "\nGenerating figures:"
        for m in self.plot_methods:
            if self.verbose: print m,
            p = getattr(self,m)()
            if p:
                self.figures.append(p)
                if self.verbose: print ": OK"
            elif self.verbose: print ": not generated"

    def save_figures(self):
        if self.abort: return
        # Remove not generated plot names
        if not self.has_surv_curve:
            self.plot_methods.remove("plot_surv_curve")
            self.plot_names.remove("07_surv-curve")
        if not self.has_agedist:
            self.plot_methods.remove("plot_age_dist")
            self.plot_names.remove("08_age-dist")
        if not int(self.single_df.loc["n_snapshots","value"])>1:
            self.plot_methods.remove("plot_genotype_mean_snaps")
            self.plot_names.remove("02_genotype-mean-snaps")
            self.plot_methods.remove("plot_fitness_term_snaps")
            self.plot_names.remove("03_fitness-term-snaps")
            self.plot_methods.remove("plot_n1_sliding_window_snaps")
            self.plot_names.remove("04_bits-snaps")
            self.plot_methods.remove("plot_n1_var_sliding_window_snaps")
            self.plot_names.remove("05_bits-var-snaps")
        # Make/replace output directory
        pm,pn,p = self.plot_methods, self.plot_names, self.figures
        if not len(pm) == len(pn) == len(p):
            errstr = "Plot names, methods and images are of different lengths."
            raise ValueError(errstr)
        if os.path.exists(self.outdir): # Overwrite existing output
                shutil.rmtree(self.outdir)
        os.makedirs(self.outdir)
        if self.verbose:
            print "\nSaving figures in "+os.path.join(os.getcwd(),self.outdir)+":"
        for n in xrange(len(self.figures)):
            outpath = os.path.join(self.outdir, self.plot_names[n] + ".png")
            if self.verbose: print self.plot_names[n]
            self.figures[n].savefig(outpath)
        s = "\nSuccessfully saved all figures. Total runtime"
        if self.verbose: print get_runtime(self.starttime, timenow(False), s)

    def plot_pop_res(self):
        f,ax = plt.subplots()
        df = self.nstagex1_df.loc[:,["stage","popsize","resources"]].set_index("stage")
        sns.lineplot(data=df, ax=ax)
        ax.set_ylim(bottom=0)
        f.suptitle("population size")
        return f

    def plot_genotype_mean_snaps(self):
        if not int(self.single_df.loc["n_snapshots","value"])>1: return
        df = self.nsnapxnloci_df
        g = sns.relplot(data=df, x="locus", y="mean_gt", hue="type", col="snap", col_wrap=4)
        #ax.set_ylim(bottom=0,top=2*int(self.single_df.loc["n_base","value"]))
        plt.subplots_adjust(top=0.92)
        g.fig.suptitle("mean genotype sum")
        return g.fig

    def plot_genotype_mean(self):
        f,ax = plt.subplots()
        df = self.nsnapxnloci_df[self.nsnapxnloci_df.snap==self.nsnapxnloci_df.snap.max()]
        df = df.drop(columns=["snap"])
        sns.scatterplot(data=df, x="locus", y="mean_gt", hue="type", ax=ax)
        ax.set_ylim(bottom=0,top=2*int(self.single_df.loc["n_base","value"]))
        f.suptitle("mean genotype sum (last snap)")
        return f

    def plot_fitness_term_snaps(self):
        if not int(self.single_df.loc["n_snapshots","value"])>1: return
        #f,ax = plt.subplots()
        df = self.nsnapxmaxls_df.loc[:,["snap","age","fitness_term"]]
        df = df[df.age >= int(self.single_df.loc["maturity","value"])]
        g = sns.relplot(data=df, x="age", y="fitness_term", col="snap", col_wrap=4,\
                kind="line", marker="o")
        #ax.set_ylim(bottom=0)
        plt.subplots_adjust(top=0.92)
        g.fig.suptitle("fitness term")
        return g.fig

    def plot_fitness_term(self):
        f,ax = plt.subplots()
        df = self.nsnapxmaxls_df.loc[:,["snap","age","fitness_term"]]
        df = df[df.snap==df.snap.max()]
        df = df.drop(columns=["snap"])
        df = df[df.age >= int(self.single_df.loc["maturity","value"])]
        sns.lineplot(data=df, x="age", y="fitness_term", ax=ax, marker="o")
        ax.set_ylim(bottom=0)
        f.suptitle("fitness term (last snap)")
        return f

    def plot_n1_sliding_window_snaps(self):
        if not int(self.single_df.loc["n_snapshots","value"])>1: return
        #f,ax = plt.subplots()
        df = self.sliding_window_df
        g = sns.relplot(data=df, x="bit", y="n1_window_mean", col="snap", col_wrap=4,\
                linewidths=0)
        #ax.set_ylim(bottom=0)
        plt.subplots_adjust(top=0.92)
        g.fig.suptitle("bit distribution - sliding window\nsize: %s" %\
                self.single_df.loc["n1_window_size","value"])
        return g.fig

    def plot_n1_var_sliding_window_snaps(self):
        if not int(self.single_df.loc["n_snapshots","value"])>1: return
        #f,ax = plt.subplots()
        df = self.sliding_window_df
        g = sns.relplot(data=df, x="bit", y="n1_window_var", col="snap", col_wrap=4,\
                linewidths=0)
        #ax.set_ylim(bottom=0)
        plt.subplots_adjust(top=0.92)
        g.fig.suptitle("bit distribution variance - sliding window\nsize: %s" %\
                self.single_df.loc["n1_window_size","value"])
        return g.fig

    def plot_surv_curve(self):
        if not self.has_surv_curve: return
        f,ax = plt.subplots()
        df = self.maxlsx1_df
        sns.lineplot(data=df, x="age", y="surv_mean", ax=ax)
        ax.set_ylim(bottom=0)
        f.suptitle("survival curve")
        return f

    def plot_generation(self):
        f,ax = plt.subplots()
        df = self.nstagex1_df.loc[:,["stage", "generation_min", "generation_max"]]\
                .set_index("stage")
        sns.lineplot(data=df, ax=ax)
        f.suptitle("generation")
        return f

    def plot_age_dist(self):
        if not self.has_agedist: return
        f,ax = plt.subplots()
        df = self.nstagexmaxls_df
        sns.lineplot(data=df, x="age", y="age_distribution", ci=None, ax=ax)
        f.suptitle("age distribution")
        return f
