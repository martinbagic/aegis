#!/usr/bin/env python

#################################################
## AEGIS: Ageing of Evolving Genomes In Silico ##
## Command-line activation script              ##
#################################################

#-----------------------------------------------------------------------------
# 1. Import libraries
#-----------------------------------------------------------------------------

import argparse,os,sys,warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import aegis

#-----------------------------------------------------------------------------
# 2. Format parent parser
#-----------------------------------------------------------------------------

mode_help="AEGIS run mode to execute:"

parser = argparse.ArgumentParser(
        description = "AEGIS: Ageing of Evolving Genomes In Silico",
        formatter_class=argparse.RawTextHelpFormatter)

#parser.add_argument('mode', help=mode_help,
#        choices = ["run", "get", "plot", "read"])

subparsers = parser.add_subparsers(dest='subparser_name',help=mode_help) # TODO: Add help string here?

#-----------------------------------------------------------------------------
# 2. Format `run` parser
#-----------------------------------------------------------------------------
run_help = "Execute an AEGIS simulation from a Config file."

parser_run = subparsers.add_parser("run", help=run_help, description=run_help)
parser_run.add_argument('input', help="path to input Config file")
parser_run.add_argument('-m', '--module', metavar='<str>', default="Core",
        help="AEGIS module to use for simulation (default: 'Core')")
parser_run.add_argument('-r', type=int, metavar="<int>", default=100,
        help="report information every <int> stages (default:100)")
parser_run.add_argument('-p', '--profile', metavar='<str>', default="",
        help="profile simulation with cProfile and save results to this path")
parser_run.add_argument('-v', '--verbose', action="store_true",
        help="report verbosely at every report stage")

#-----------------------------------------------------------------------------
# 3. Format `get` parser
#-----------------------------------------------------------------------------
get_help = "Copy a default Config file to a specified path for editing."

parser_get = subparsers.add_parser("get", help=get_help, description=get_help)
parser_get.add_argument('path', help="path to save new Config file")
parser_get.add_argument('-m', '--module', metavar='<str>', default="Core",
        help="AEGIS module to use for Config file (default: 'Core')")

#-----------------------------------------------------------------------------
# 4. Format `plot` parser
#-----------------------------------------------------------------------------
plot_help = "Generate plots from an AEGIS Record file."

parser_plot = subparsers.add_parser("plot", help=plot_help, 
        description=plot_help)
parser_plot.add_argument('input', help="path to input Record file")
parser_plot.add_argument('-m', '--module', metavar='<str>', default="Core",
        help="AEGIS module used to produce Record file (default: 'Core')")
parser_plot.add_argument('-v', '--verbose', action="store_true",
        help="report verbosely during plotting")
parser_plot.add_argument('-w', '--window', type=int, metavar='<int>', 
        default=0, help="specify window size for sliding-window plots")

#-----------------------------------------------------------------------------
# 5. Format `read` parser
#-----------------------------------------------------------------------------
read_help = "Extract information from an AEGIS Record file to a new path."

parser_read = subparsers.add_parser("read", help=read_help, 
        description = read_help)
parser_read.add_argument('input', help="path to input Record file")
parser_read.add_argument('output', help="path to use for output")
parser_read.add_argument('-m', '--module', metavar='<str>', default="Core",
        help="AEGIS module used to produce Record file (default: 'Core')")

# Specify information to extract
read_mode = parser_read.add_mutually_exclusive_group(required=True)
read_mode.add_argument('-s', '--seed', action="store_true",
        help="extract random seed from Record file")
read_mode.add_argument('-i', '--info', action="store_true",
        help="print general information on contents of Record file") # TODO: Improve this

#-----------------------------------------------------------------------------
# 6. Parse args and execute AEGIS
#-----------------------------------------------------------------------------

args = parser.parse_args()

module = getattr(aegis, args.module)
#inpath = os.path.expanduser(args.infile)

if args.subparser_name == "run":
    if args.profile != "": # Start profiling
        import cProfile, pstats, StringIO
        pr = cProfile.Profile()
        pr.enable()
    path = os.path.expanduser(args.input)
    module.run(path, args.r, args.verbose)

elif args.subparser_name == "get":
    path = os.path.expanduser(args.path)
    module.getconfig(path)

elif args.subparser_name == "plot":
    path = os.path.expanduser(args.input)
    if args.window == 0:
        module.plot(path)
    else:
        module.plot_n1_sliding_window(path, args.window) # TODO: Get rid of this if

elif args.subparser_name == "read":
    inpath = os.path.expanduser(args.input)
    outpath = os.path.expanduser(args.output)
    if args.seed:
        module.getrseed(inpath, outpath)
    elif args.info:
        module.getrecinfo(inpath, outpath)

if args.subparser_name == "run" and args.profile != "": # Finish profiling
    pr.create_stats()
    pr.dump_stats(args.profile)
